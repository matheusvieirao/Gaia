//essas mudanças eu fiz no intuito de contençar o algoritmo de busca A* em só um método, CalcularCaminho

int Guarda2::CalcularCaminho(Vec2 gaia_t_pos, TileMap* t_map){
    printf("Calcular Caminho\n");
    bool achou = false;

    int i, j;
    int map_width = t_map->GetWidth();
    int map_height = t_map->GetHeight();
    int x_destino = gaia_t_pos.x;
    int y_destino = gaia_t_pos.y;
    float mod_x, mod_y;

    std::vector<Celula*> celulas; //utilizado no algoritmo de busca A* (CalcularCaminho)
    std::vector<Celula*> celulas_nao_checadas; //utilizado no algoritmo de busca A* (CalcularCaminho)
    std::vector<int> caminho; //coordenadas que o guarda deve tomar para chegar ate a Gaia

    if(celulas_nao_checadas.size()!=0){
        celulas_nao_checadas.clear();
    }
    for(i = celulas.size()-1; i >= 0 ; i--){
printf("0\n");
        free(celulas[i]);
    }
    if(celulas.size()!=0){
        celulas.clear();
    }
    if(mapa_aux.size()!=0){
        mapa_aux.clear();
    }
    if(caminho.size()!=0){
        caminho.clear();
    }

    for(j = 0; j < map_height; j++){
        for(i = 0; i < map_width; i++){
            mapa_aux.push_back(t_map->GetTileInfo(comodo_atual, i, j));
        }
    }


    if(VerificarMapa(guarda_t_pos.x, guarda_t_pos.y, map_width, map_height)){
printf("2\n");
        Celula *cel_origem = new Celula(guarda_t_pos.x, guarda_t_pos.y, nullptr);
        cel_origem->custo_ate_agora = 0;

        //Quanto Falta
        mod_x = Modulo(cel_origem->x - x_destino);
	    mod_y = Modulo(cel_origem->y - y_destino);
        cel_origem->custo_total = sqrt(mod_x*mod_x + mod_y*mod_y);

        celulas.push_back(cel_origem);
        celulas_nao_checadas.push_back(celulas.back());
    }
    else{
        return (-1); //impossivel ligar origem ao destino
    }

    while(!achou && tempo_estado.Get() < 1.5){
printf("3\n");
        Celula* cel_aux = celulas_nao_checadas.back();
        celulas_nao_checadas.pop_back();
        if(cel_aux->x == x_destino && cel_aux->y == y_destino){
            //nao entra no vetor caminho a celula aonde o guarda se encontra
            for( ; cel_aux->ptr_cel_antiga!=nullptr; cel_aux=cel_aux->ptr_cel_antiga){
                if(cel_aux->x < cel_aux->ptr_cel_antiga->x){
                    caminho.push_back(NO);
                    printf("NO\n");
                }
                else if(cel_aux->y < cel_aux->ptr_cel_antiga->y){
                    caminho.push_back(NE);
                    printf("NE\n");
                }
                else if(cel_aux->x > cel_aux->ptr_cel_antiga->x){
                    caminho.push_back(SE);
                    printf("SE\n");
                }
                else if(cel_aux->y > cel_aux->ptr_cel_antiga->y){
                    caminho.push_back(SO);
                    printf("SO\n");
                }
                //printf("%d,%d | ",(int)cel_aux->x, (int)cel_aux->y);
            }
            if(cel_aux->x < guarda_t_pos.x){
                caminho.push_back(NO);
            }
            else if(cel_aux->y < guarda_t_pos.y){
                caminho.push_back(NE);
            }
            else if(cel_aux->x > guarda_t_pos.x){
                caminho.push_back(SE);
            }
            else if(cel_aux->y > guarda_t_pos.y){
                caminho.push_back(SO);
            }
            achou = true;
        }
        else{
printf("4\n");
        	int nova_cel_x = -1;
        	int nova_cel_y = -1;
        	bool achou_nova_celula = false;
            if(VerificarMapa(cel_aux->x, cel_aux->y+1, map_width, map_height)){
            	nova_cel_x = cel_aux->x;
            	nova_cel_y = cel_aux->y+1;
            	achou_nova_celula = true;
            }
            if(VerificarMapa(cel_aux->x-1, cel_aux->y, map_width, map_height)){
            	nova_cel_x = cel_aux->x-1;
            	nova_cel_y = cel_aux->y;
            	achou_nova_celula = true;
            }
            if(VerificarMapa(cel_aux->x, cel_aux->y-1, map_width, map_height)){
            	nova_cel_x = cel_aux->x;
            	nova_cel_y = cel_aux->y-1;
            	achou_nova_celula = true;
            }
            if(VerificarMapa(cel_aux->x +1, cel_aux->y, map_width, map_height)){
            	nova_cel_x = cel_aux->x+1;
            	nova_cel_y = cel_aux->y;
            	achou_nova_celula = true;
            }
            //Inserir Ordenado
            if(achou_nova_celula){
            	Celula* nova_cel = new Celula(nova_cel_x, nova_cel_y, cel_aux);
			    nova_cel->custo_ate_agora = cel_aux->custo_ate_agora + 1;

			    mod_x = Modulo(nova_cel_x - x_destino);
			    mod_y = Modulo(nova_cel_y - y_destino);
			    float quanto_falta = sqrt(mod_x*mod_x + mod_y*mod_y);
			    nova_cel->custo_total = nova_cel->custo_ate_agora + quanto_falta;

			    celulas.push_back(nova_cel);
			    celulas_nao_checadas.push_back(celulas.back());
			    //ordenar vetor
			    i = celulas_nao_checadas.size();
			    i--;
			    while(i>0 && celulas_nao_checadas[i]->custo_total > celulas_nao_checadas[i-1]->custo_total){
			        std::swap(celulas_nao_checadas[i], celulas_nao_checadas[i-1]);
			        i--;
    			}
            }
        }
    }
    return(caminho.size());
}

bool Guarda2::VerificarMapa(int x, int y, int map_width, int map_height){
    if (x>=0 && x<map_width && y>= 0 && y<map_height){
        //0 é aonde nao tem tile e 18 é o tile que nao pode ser pisado
        if(mapa_aux[y*map_width + x] != 0 && mapa_aux[y*map_width + x] != 18){
            mapa_aux[y*map_width + x] = 0;
            return (true);
        }
        else{
            return (false);
        }
    }
    else{
        return(false);
    }
}

float Guarda2::Modulo(float x){
	if(x < 0)
		return(-x);
	else
		return(x);
}